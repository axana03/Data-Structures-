package bst;

import java.util.ArrayList;
import java.util.Iterator;

import binaryTree.BNode;
import binaryTree.BinaryTree;
import mapAndSet.Set;

public class BST<K extends Comparable<K>> extends BinaryTree<K> implements Set<K>{
   public BNode<K> findNode(K x) {
      if (root() == null)
         return null;
      return recursiveFindNode((BNode<K>) root(), x);
   }

   // either find the node containing target or the future parent of a Node that would contain target
   protected BNode<K> recursiveFindNode(BNode<K> node, K target) {
      int comparison = target.compareTo(node.getData());
      if (comparison == 0) return node;
      if (comparison < 0 && node.getLeft() != null) return recursiveFindNode(node.getLeft(), target);
      if (comparison > 0 && node.getRight() != null) return recursiveFindNode(node.getRight(), target);
      return node;
   }

   public void remove(K x) {
      BNode<K> n = findNode(x);
      if (n == null || !n.getData().equals(x))
         return; // x is not present
      removeNode(n);
   }

   public void add(K x) throws Exception {
      BNode<K> n = findNode(x);
      if (n == null)
         addRoot(x);
      else if ((n.getData()).compareTo(x) > 0)
         addLeft(n, x);
      else if ((n.getData()).compareTo(x) < 0)
         addRight(n, x);
      else n.setData(x);
   }

   public boolean contains(K x) {
      BNode<K> n = findNode(x);
      if (n == null || !n.getData().equals(x))
         return false;
      return true;
   }

   public boolean isEmpty() {
      return root == null;
   }

   public K get(K k) {
      BNode<K> n = findNode(k);
      if (n == null || !n.getData().equals(k))
         return null;
      return n.getData();
   }

   public Iterator<K> iterator() {
      ArrayList<BNode<K>> l = inOrder();
      ArrayList<K> temp = new ArrayList<K>();
      for (BNode<K> n: l) temp.add(n.getData());
      return temp.iterator();
   }

   public void dumpData() {
      System.out.println(treePrint(null));
   }
}
=============================================================
package bst;

import java.util.Scanner;

public class BSTDemo  {
   public static void main(String args[]) {
    BST<String> searchTree = new BST<String>();
    Scanner s = new Scanner(System.in);
    try {
      while (true) {
         System.out.println(searchTree.toString() + "  :cmds are + -  H Q: ");
         String cmd = s.next();
         if (cmd.charAt(0) == 'Q') break;
         if (cmd.charAt(0) == 'H') {
            System.out.println(searchTree.height());
            continue;
         }
         if (cmd.charAt(0) == '-') {
            String entry = s.next();
            searchTree.remove(entry);
         }
         if (cmd.charAt(0) == '+') {
            String entry = s.next();
            searchTree.add(entry);
         }
      }
    } catch (Exception e) {
       System.out.println(e);
    }
    s.close();
 }
}

=====================================================================
package bst;

import chainedHash.ChainedHashTableDemo;
import mapAndSet.ComparableEntry;
import mapAndSet.Map;
import mapAndSet.SetComparableAdapterMap;

public class BSTMapDemo {
   public static void main(String args[]) {
      BST<ComparableEntry<String, String>> table = 
            new BST<ComparableEntry<String, String>>();
      Map<String, String> m = new SetComparableAdapterMap<String, String>(table);
      ChainedHashTableDemo.testMap(m);
   }
}
