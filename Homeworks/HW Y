import java.util.ArrayList;
import java.util.Iterator;
import java.util.Scanner;

// import java.util.Stack;   // You will probably want to make use of this

// Homework Y:  Expression trees.

// In the project you need to code one class that extends the abstract class ExpressionTree.  
// Your class needs to code one constructor and one output method as well as any helper methods
// that you find useful.
// The goal is to process mathematical expressions that are provided as strings.

// In the main program that tests your class,
// the Utility getInput method reads a mathematical expression that is typed as input.
// The expression can contain any combination of numbers, variable identifiers and mathematical operations.
// These mathematical operations are +, -, *, /, ( and )

// The constructor should turn an input expression into the content of a binary (expression) tree.
// The tree can then be printed in prefix, postfix, or fully parenthesised infix notation.
// The first two of these methods have been coded for you in the abstract class ExpressionTree, you need to code the third.

// For example the expression   5 + (x / y + z * 7) - 2  would be printed as
//                              - + 5 + / x y * z 7 2  in prefix order
//  or                          5 x y / z 7 * + + 2 -  in postfix order
//  or               (( 5 + ((x / y) + (z * 7))) - 2)  in fully parenthesised infix notation.


// To simplify things in this project the - sign can only be used between 2 quantities that are being subtracted.
// This will prevent you from ever working with a negative number such as -2 which would involve a different
// use for the - character.  However the simplification means that your code does not need to work out which meaning
// to attach to any copy of a - character.  

// Another simplification for this project is that you may assume that only correct mathematical expressions are entered.
// You do not need to check that an input String from getInput makes sense as an expression.
// If an illegal expression is encountered, your program can behave in any way that is convenient for you.

// You should change the class name Y00000000 so that the last 8 digits are your QC ID number.
// You should only make changes inside this class.
// You do not need any more than 100 lines of code in the class.
// After you have tested your work on venus (as well as in your development environment)
// cut the file above the class Utility and submit it by email.
// See also the general homework guidelines for other instructions before you submit work. 

// The hard part of this assignment is the constructor.  
// In terms of planning it, I suggest that you think about which operation is the last to be performed in the expression.
// Can you write down a rule to identify this operation? Deal with the easier case when there are no parentheses first.
//
// Once you accomplish this you can finish quickly using a recursion.
//
// The fullyParenthesised method can also be done using a recursion --- 
//     this will require an auxiliary recursive method to call on.

// Suggested strategy:
// 1. Make a constructor that deals with expressions without parentheses  (1st step partial credit).
// 2. Make a fullyParenthesised output method  (2nd step partial credit).
// 3. Adapt the constructor to deal with parentheses.  Hint a Stack will help here.  (Last part of credit).

public class Yxxxxxxxx extends ExpressionTree {

  public static void main(String args[]) {
    Yxxxxxxxx y = new Yxxxxxxxx("5 + 6 * 7");
    Utility.print(y);
    y = new Yxxxxxxxx(Utility.getInput());
    Utility.print(y);
  }
  
  public String fullyParenthesised() {
    return fullyParenthesised((BNode<String>) root);
  }

  private String fullyParenthesised(BNode<String> n) {
    if (n == null) return "";
    String d = n.getData();
    if (d.equals("+") || d.equals("-") || d.equals("*") || d.equals("/"))
      return "(" + fullyParenthesised(n.getLeft()) + " " + d + " " +
          fullyParenthesised(n.getRight()) + ")";
    return d;
  }

  public Yxxxxxxxx(String s) {
    super();
    root = parse(s, null);
    size = inOrder().size();
  }
  
  public BNode<String> parse(String s, BNode<String> parent) {
    s = s.trim();
    int lowestPriority = 0, bestIndex = -1;       // priority = 2 * paren depth + {0 for +- or 1 for */}
    Stack<Integer> store = new Stack<Integer>();  // stores indices of opening parentheses
    store.push(-1);                               // marks an imaginary parenthesis around everything 
    for (int i = 0; i < s.length(); i++) {
      char c = s.charAt(i);
      int operationAdjust = 0;
      switch (c) {
        case '(': store.push(i);
        break;
        case ')': if (!store.empty()) store.pop();
        break;
        case '*': case '/': operationAdjust = 1;
        case '+': case '-':
          int priority = 2 * store.peek() + operationAdjust;
          if (bestIndex == -1 || priority <= lowestPriority) {
            lowestPriority = priority;
            bestIndex = i;
          }
        break;
      }
    }
    if (bestIndex == -1) 
      return new BNode<String>(s.replaceAll("\\(","").replaceAll("\\)", ""), parent, null, null);
    BNode<String> node = new BNode<>(s.substring(bestIndex, bestIndex + 1), parent, null, null);
    node.setLeft(parse(s.substring(0, bestIndex), node));
    node.setRight(parse(s.substring(bestIndex + 1, s.length()), node));
    return node;
  }
}
