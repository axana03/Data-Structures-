package heap;

import java.util.Scanner;

public class HeapPQApp {
   // menu driven program to test the heap implementation
   public static void main(String args[]) {
      HeapPriorityQueue<String> pq = new HeapPriorityQueue<String>();
      boolean done = false;
      Scanner sc = new Scanner(System.in);
      while (!done) {
         try {
            System.out.println("\ncmds are + - Q: >>");
            String cmd = sc.next();
            String entry = null;
            char command = cmd.charAt(0);
            if (command == '+')
               entry = sc.next();
            switch (cmd.charAt(0)) {
            case 'Q':
               done = true;
               break;
            case '+':
               pq.add(entry);
               break;
            case '-':
               System.out.println(pq.removeMin());
               break;
            }
         } catch (Exception e) {
            System.out.println("Error " + e.toString());
         }
      }
      sc.close();
   }
}
---------------------------------------------------------------------
package heap;

import java.util.Iterator;

public class HeapPriorityQueue<K extends Comparable<K>> implements
      PriorityQueue<K> {
   private K data[];
   private int size;
   private int capacity;

   // constructors
   public HeapPriorityQueue() {
      capacity = 100;
      size = 0;
      data = (K[]) new Comparable[capacity];
   }

   public HeapPriorityQueue(int c) {
      capacity = c;
      size = 0;
      data = (K[]) new Comparable[capacity];
   }

   // required priority queue methods
   public void add(K x) throws Exception {
      if (size >= capacity - 1)
         throw new Exception("Priority Queue Full");
      data[size++] = x;
      bubbleUp(size - 1);
   }

   public K removeMin() throws Exception {
      if (size <= 0)
         throw new Exception("Priority Queue Empty");
      swapData(0, --size);
      bubbleDown(0);
      return data[size];
   }

   // auxiliary utility methods
   private void swapData(int n, int m) {
      K temp = data[n];
      data[n] = data[m];
      data[m] = temp;
   }

   private void bubbleUp(int n) {
      if (n <= 0)
         return; // at root
      K dn = data[n];
      K dp = data[(n - 1) / 2]; // parent data
      if (dn.compareTo(dp) >= 0)
         return; // no problems
      swapData(n, (n - 1) / 2);
      bubbleUp((n - 1) / 2);
   }

   public void bubbleDown(int n) {
      if (2 * n + 1 >= size)
         return; // at leaf
      K dn = data[n];
      K dl = data[2 * n + 1]; // left child
      K dr = dl;
      if (2 * n + 2 < size)
         dr = data[2 * n + 2]; // right child
      if (dn.compareTo(dl) < 0 && dn.compareTo(dr) < 0)
         return; // no problems
      if (dr.compareTo(dl) < 0) {
         swapData(n, 2 * n + 2);
         bubbleDown(2 * n + 2);
      } else {
         swapData(n, 2 * n + 1);
         bubbleDown(2 * n + 1);
      }
   }

   // heap creation
   public void heapify(Iterator<K> x) throws Exception {
      while (x.hasNext()) {
         if (size + 1 == capacity)
            break;
         data[size++] = x.next();
      }
      int n = size / 2;
      while (--n >= 0)
         bubbleDown(n);
      if (x.hasNext())
         throw new Exception("Heap is Full");
   }

}
-------------------------------------------------------------
package heap;

import java.util.Arrays;
import java.util.Random;

public class HeapSort {
   public static void main(String args[]) throws Exception {
      Integer[] data = randomizeInts(20);
      System.out.print("Unsorted: ");
      for (int x:data) System.out.print(x + " ");
      System.out.println();
      heapSort(data);
      System.out.print("  Sorted: ");
      for (int x:data) System.out.print(x + " ");
      System.out.println();
   }
   
   private static void heapSort(Integer[] data) throws Exception {
      HeapPriorityQueue<Integer> h = new HeapPriorityQueue<>();
      h.heapify(Arrays.asList(data).iterator());
      for (int i = 0; i < data.length; i++)
         data[i] = h.removeMin();
   }

   private static Integer[] randomizeInts(int cap) {
      Random r = new Random();
      Integer ans[] = new Integer[cap];
      for (int i = 0; i < cap; i++)
         ans[i] = r.nextInt(1000);
      return ans;
   }
}
-----------------------------------------------------------------
package heap;

public class PQsortedArray<K extends Comparable<K>> implements PriorityQueue<K> {
   K[] data;
   int size;
   int capacity;

   public PQsortedArray() {
      capacity = 100;
      size = 0;
      data = (K[]) new Comparable[capacity];
   }
   public void add(K x) throws Exception {
      if (size >= capacity) throw new Exception("Queue Full");
      int i = size++;
      while (i > 0 && data[i - 1].compareTo(x) < 0) {
         data[i] = data[i - 1];
         i--;
      }
      data[i] = x;
   }

   public K removeMin() throws Exception {
      if (size == 0) throw new Exception("Queue Empty");
      return data[--size];
   }
}
----------------------------------------------------------------------------
package heap;

public class PQunsortedArray<K extends Comparable<K>> implements PriorityQueue<K> {
   K[] data;
   int size;
   int capacity;

   public PQunsortedArray() {
      capacity = 100;
      size = 0;
      data = (K[]) new Comparable[capacity];
   }
   
   // easy insertion
   public void add(K x) throws Exception {
      if (size >= capacity) throw new Exception("Queue full");
      data[size++] = x;
   }

   public K removeMin() throws Exception {
      if (size == 0) throw new Exception("Queue Empty");
      int minIndex = 0;
      for (int i = 1; i < size; i++)
         if (data[i].compareTo(data[minIndex]) < 0)
            minIndex = i;
      K ans = data[minIndex];
      for (int i = minIndex + 1; i < size; i++)
         data[i - 1] = data[i];
      size--;
      return ans;
   }
}
---------------------------------------------------------------------------------------
package heap;

public interface PriorityQueue<K extends Comparable<K>> {
   public void add(K x) throws Exception;
   public K removeMin() throws Exception;
}
