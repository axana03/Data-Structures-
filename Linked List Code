import java.util.Scanner;

// doubly linked list, uses header and trailer sentinels.

public class DList<T> {
   private DNode<T> header, trailer;
   private int size;

   public DList() {
      size = 0;
      header = new DNode<T>(null, null, null);
      trailer = new DNode<T>(null, header, null);
      header.setNext(trailer);
   }

   // utility methods

   public int size() {
      return size;
   }

   public boolean isEmpty() {
      return size == 0;
   }

   // give clients access to nodes, but not to the header or trailer

   public DNode<T> getFirst() throws Exception {
      if (isEmpty())
         throw new Exception("Empty");
      return header.getNext();
   }

   public DNode<T> getLast() throws Exception {
      if (isEmpty())
         throw new Exception("Empty");
      return trailer.getPrev();
   }

   public DNode<T> getNext(DNode<T> v) throws Exception {
      DNode<T> ans = v.getNext();
      if (ans == null || ans == trailer)
         throw new Exception("No such node");
      return ans;
   }

   public DNode<T> getPrev(DNode<T> v) throws Exception {
      DNode<T> ans = v.getPrev();
      if (ans == null || ans == header)
         throw new Exception("No such node");
      return ans;
   }

   // methods to change the list

   public void addBefore(T d, DNode<T> v) {
      DNode<T> u = v.getPrev();
      DNode<T> x = new DNode<T>(d, u, v);
      u.setNext(x);
      v.setPrev(x);
      size++;
   }

   public void addAfter(T d, DNode<T> v) {
      DNode<T> w = v.getNext();
      DNode<T> x = new DNode<T>(d, v, w);
      v.setNext(x);
      w.setPrev(x);
      size++;
   }

   public void addFirst(T d) throws Exception {
      addAfter(d, header);
   }

   public void addLast(T d) throws Exception {
      addBefore(d, trailer);
   }

   public T remove(DNode<T> v) throws Exception {
      if (v == header || v == trailer)
         throw new Exception("Sentinel");
      DNode<T> u = v.getPrev();
      DNode<T> w = v.getNext();
      w.setPrev(u);
      u.setNext(w);
      size--;
      return v.getData();
   }

   // LinkedList testing methods:

   public String toString() {
      String ans = "";
      DNode<T> n = header;
      ans += "(H)<-->";
      do {
         n = n.getNext();
         if (n == trailer)
            ans += "(T)";
         else
            ans += (n.getData() + "<-->");
      } while (n != trailer);
      return ans;
   }

   public static void main(String args[]) {
      DList<String> list = new DList<String>();
      DNode<String> cursor = null;
      boolean done = false;
      Scanner s = new Scanner(System.in);
      while (!done) {
         try {
            System.out.print(list + "  ");
            if (cursor != null && cursor.getData() != null)
               System.out.print(" ^^ " + cursor.getData());
            System.out.println("\ncmds are H(elp) F L B A R + - Q: >>");
            String cmd = s.next().trim().toUpperCase();
            String entry = null;
            char command = cmd.charAt(0);
            if (command == 'F' || command == 'L' || command == 'B'
                  || command == 'A')
               entry = s.next();
            switch (cmd.charAt(0)) {
            case 'Q':
               done = true;
               break;
            case 'H':
               String help = "H: Help \n" + "F x: Add x at first place\n"
                     + "L x: Add x at last place\n"
                     + "B x: Add x before the cursor\n"
                     + "A x: Add x after the cursor\n"
                     + "A x: Add x after the cursor\n"
                     + "+  : Advance the cursor\n"
                     + "-  : Move the cursor back\n";
               System.out.print(help);
               break;
            case 'R':
               DNode<String> e = cursor.getNext();
               list.remove(cursor);
               cursor = e;
               if (cursor == list.trailer)
                  cursor = cursor.getPrev();
               break;
            case '+':
               cursor = list.getNext(cursor);
               break;
            case '-':
               cursor = list.getPrev(cursor);
               break;
            case 'F':
               list.addFirst(entry);
               cursor = list.getFirst();
               break;
            case 'L':
               list.addLast(entry);
               cursor = list.getLast();
               break;
            case 'B':
               list.addBefore(entry, cursor);
               cursor = list.getPrev(cursor);
               break;
            case 'A':
               list.addAfter(entry, cursor);
               cursor = list.getNext(cursor);
               break;
            }
         } catch (Exception e) {
            System.out.println("Command failed because: " + e.toString());
         }
      }
      s.close();
   }
}
-------------------------------------------------------------------------------------------------
public class DNode<T> {
   private T data;
   private DNode<T> prev, next;

   public DNode(T d, DNode<T> p, DNode<T> n) {
      data = d;
      next = n;
      prev = p;
   }

   public T getData() {
      return data;
   }

   public DNode<T> getNext() {
      return next;
   }

   public DNode<T> getPrev() {
      return prev;
   }

   public void setData(T d) {
      data = d;
   }

   public void setNext(DNode<T> n) {
      next = n;
   }

   public void setPrev(DNode<T> p) {
      prev = p;
   }
}
-----------------------------------------------------------------------------------------
import java.util.Scanner;

import listNode.Node;

public class LinkedList<T> {
   // instance variables
   private Node<T> head, tail;
   private int size;

   // constructor
   public LinkedList() {
      head = tail = null;
      size = 0;
   }

   // utility methods

   public int size() {
      return size;
   }

   public boolean isEmpty() {
      return size == 0;
   }

   // methods to change the list

   public void addHead(T d) {
      Node<T> n = new Node<T>(d, head);
      head = n;
      size++;
      if (tail == null)
         tail = head;
   }

   public void addTail(T d) {
      Node<T> n = new Node<T>(d, null);
      if (tail == null)
         head = tail = n;
      else {
         tail.setNext(n);
         tail = n;
      }
      size++;
   }

   public T removeHead() throws Exception {
      if (head == null)
         throw new Exception("Empty List");
      Node<T> n = head;
      head = head.getNext();
      if (head == null)
         tail = head;
      size--;
      return n.getData();
   }

   // LinkedList testing methods:

   public String toString() {
      String ans = "";
      Node<T> n = head;
      ans += "(H)-->";
      while (n != null) {
         ans += n.getData();
         ans += "-->";
         n = n.getNext();
      }
      return ans + "(T)";
   }

   public static void main(String args[]) {
      LinkedList<String> l = new LinkedList<String>();
      Scanner s = new Scanner(System.in);
      while (true) {
         System.out.println(l + "  :cmds are H T R Q: ");
         String cmd = s.next();
         if (cmd.charAt(0) == 'Q')
            break;
         if (cmd.charAt(0) == 'R')
            try {
               l.removeHead();
            } catch (Exception e) {
               System.out
                     .println("Remove failed.  List was already empty!");
            }
         else {
            String entry = s.next();
            if (cmd.charAt(0) == 'H')
               l.addHead(entry);
            if (cmd.charAt(0) == 'T')
               l.addTail(entry);
         }
      }
      s.close();
   }
}
