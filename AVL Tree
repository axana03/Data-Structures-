package avl;

import chainedHash.ChainedHashTableDemo;
import mapAndSet.ComparableEntry;
import mapAndSet.Map;
import mapAndSet.SetComparableAdapterMap;

public class AVLMapDemo {
   public static void main(String args[]) {
      AVLTree<ComparableEntry<String, String>> table = new AVLTree<ComparableEntry<String, String>>();
      Map<String, String> m = new SetComparableAdapterMap<String, String>(table);
      ChainedHashTableDemo.testMap(m);
   }
}
====================================================================

package avl;

import binaryTree.BNode;

class AVLNode<K extends Comparable<K>> extends BNode<K> {
   public int leftChildHt, rightChildHt;

   public static int max(int x, int y) {
      if (x > y)
         return x;
      return y;
   }

   public int fixHt() {
      leftChildHt = rightChildHt = -1;
      AVLNode<K> l = (AVLNode<K>) getLeft();
      AVLNode<K> r = (AVLNode<K>) getRight();
      if (l != null)
         leftChildHt = 1 + max(l.leftChildHt, l.rightChildHt);
      if (r != null)
         rightChildHt = 1 + max(r.leftChildHt, r.rightChildHt);
      if (leftChildHt > rightChildHt)
         return leftChildHt;
      return rightChildHt;
   }

   public AVLNode(K d, BNode parent, BNode leftChild, BNode rightChild) {
      super(d, parent, leftChild, rightChild);
      fixHt();
   }
}
=====================================================================
package avl;

import binaryTree.BNode;
import bst.BST;
import mapAndSet.Set;

public class AVLTree<K extends Comparable<K>> extends BST<K>{
   public AVLTree() {
      super();
   }
   
   public void addRoot(K data) throws Exception {
      if (root != null)
         throw new Exception("The Tree is not empty");
      root = new AVLNode<K>(data, null, null, null);
      size++;
   }

   public void addLeft(BNode<K> node, K data) throws Exception {
      if (node.getLeft() != null)
         throw new Exception("Attempt to replace existing node.");
      node.setLeft(new AVLNode<K>(data, node, null, null));
      size++;
      rebalance((AVLNode<K>) node);  // to deal with potential balance problems above the node
   }

   public void addRight(BNode<K> node, K data) throws Exception {
      if (node.getRight() != null)
         throw new Exception("Attempt to replace existing node.");
      node.setRight(new AVLNode<K>(data, node, null, null));
      size++;
      rebalance((AVLNode<K>) node);
   }

   public void remove(K data) {
      BNode<K> node = findNode(data);
      if (node == null || !node.getData().equals(data)) return; // because data is not present
      AVLNode<K> parent = (AVLNode<K>) removeNode(node);        // parent has just lost a node, so ...
      rebalance(parent);
   }

   // decide whether and which rotation can fix balance at node and then recursively rebalance parent if needed
   public void rebalance(AVLNode<K> node) {
      if (node == null) return;
      int oldMaxHt = AVLNode.max(node.leftChildHt, node.rightChildHt);
      int newMaxHt = node.fixHt();
      if (newMaxHt > node.leftChildHt + 1 || newMaxHt > node.rightChildHt + 1) {  // rotation required
         AVLNode<K> leftChild = (AVLNode<K>) node.getLeft();
         AVLNode<K> rightChild = (AVLNode<K>) node.getRight();
         if (node.leftChildHt > node.rightChildHt && 
               leftChild.leftChildHt >= leftChild.rightChildHt) // single rotate at left
            rebuildNode(node, leftChild, leftChild.getLeft(), node, 
                  leftChild.getLeft().getLeft(), leftChild.getLeft().getRight(), 
                  leftChild.getRight(), rightChild);
         else if (node.leftChildHt > node.rightChildHt) // double rotate at left
            rebuildNode(node, leftChild.getRight(), leftChild, node, 
                  leftChild.getLeft(), leftChild.getRight().getLeft(), 
                  leftChild.getRight().getRight(), rightChild);
         else if (rightChild.rightChildHt >= rightChild.leftChildHt) // single rotate at right
            rebuildNode(node, rightChild, node, rightChild.getRight(), 
                  leftChild, rightChild.getLeft(), 
                  rightChild.getRight().getLeft(), rightChild.getRight().getRight());
         else   // double rotate at right
            rebuildNode(node, rightChild.getLeft(), node, rightChild, 
                  leftChild, rightChild.getLeft().getLeft(), 
                  rightChild.getLeft().getRight(), rightChild.getRight());
      }
      newMaxHt = node.fixHt();
      if (oldMaxHt != newMaxHt) rebalance((AVLNode<K>) node.getParent());
   }

   // node is rebuilt so that its data and child data is from putTop, putLeft, putRight
   // and the 4 subtrees under its children are subTree1 ... subTree4 in order.
   // this one function can carry out both single and double rotations
   public void rebuildNode(BNode<K> node, BNode<K> putTop, BNode<K> putLeft, BNode<K> putRight,
         BNode<K> subTree1, BNode<K> subTree2, BNode<K> subTree3, BNode<K> subTree4) {
      AVLNode<K> newLeft = new AVLNode<K>(putLeft.getData(), node, subTree1, subTree2);
      AVLNode<K> newRight = new AVLNode<K>(putRight.getData(), node, subTree3, subTree4);
      if (subTree1 != null) subTree1.setParent(newLeft);
      if (subTree2 != null) subTree2.setParent(newLeft);
      if (subTree3 != null) subTree3.setParent(newRight);
      if (subTree4 != null) subTree4.setParent(newRight);
      newLeft.fixHt();
      newRight.fixHt();
      node.setData(putTop.getData());
      node.setLeft(newLeft);
      node.setRight(newRight);
   }
}
